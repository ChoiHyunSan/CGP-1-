////////////////////////////////////////////////////////////////////////////////
// Filename: light.ps
////////////////////////////////////////////////////////////////////////////////
#define NUM_LIGHTS 4

/////////////
// GLOBALS //
/////////////
Texture2D shaderTextures[2];
SamplerState SampleType;

cbuffer LightColorBuffer
{
    float4 diffuseColors[NUM_LIGHTS];
};

cbuffer LightBuffer
{
	float4 ambientColor;
	float4 diffuseColor;
    float3 lightDirection;
    float specularPower;
    float4 specularColor;
	float4 lightType;
};

//////////////
// TYPEDEFS //
//////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 viewDirection : TEXCOORD1;
	float3 lightPos1 : TEXCOORD2;
    float3 lightPos2 : TEXCOORD3;
    float3 lightPos3 : TEXCOORD4;
    float3 lightPos4 : TEXCOORD5;
};

////////////////////////////////////////////////////////////////////////////////
// Pixel Shader
////////////////////////////////////////////////////////////////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float4 textureColor2;
	float4 blendColor;
	float3 lightDir;
	float lightIntensity, lightIntensity1, lightIntensity2, lightIntensity3, lightIntensity4;
	float3 reflection;
    float4 specular;
	float4 color, color1, color2, color3, color4;
	float4 result;

	// Sample the pixel color from the texture using the sampler at this texture coordinate location.
	textureColor = shaderTextures[0].Sample(SampleType, input.tex);
	textureColor2 = shaderTextures[1].Sample(SampleType, input.tex);

	// Set the default output color to the ambient light value for all pixels.
	color = float4(0.0f, 0.0f, 0.0f, 0.0f);
	color1 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	color2 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	color3 = float4(0.0f, 0.0f, 0.0f, 0.0f);
	color4 = float4(0.0f, 0.0f, 0.0f, 0.0f);

	color = ambientColor;
	if(lightType[0] == 0.0f){
		color = ambientColor;
	}

	// Initialize the specular color.
	specular = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity	= saturate(dot(input.normal, lightDir));
	lightIntensity1 = saturate(dot(input.normal, input.lightPos1));
    lightIntensity2 = saturate(dot(input.normal, input.lightPos2));
    lightIntensity3 = saturate(dot(input.normal, input.lightPos3));
    lightIntensity4 = saturate(dot(input.normal, input.lightPos4));


	color += (diffuseColor * lightIntensity);
	color1 += diffuseColors[0] * lightIntensity1 * 1.0f;
	color2 += diffuseColors[1] * lightIntensity2 * 1.0f;
	color3 += diffuseColors[2] * lightIntensity3 * 1.0f;
	color4 += diffuseColors[3] * lightIntensity4 * 1.0f;

	if(lightIntensity > 0.0f)
    {
        // Determine the final diffuse color based on the diffuse color and the amount of light intensity.

		if(lightType[1] == 0.0f){
			color += (diffuseColor * lightIntensity);
		}
	    // Saturate the ambient and diffuse color.
		color = saturate(color);

		// Calculate the reflection vector based on the light intensity, normal vector, and light direction.
        reflection = normalize(2 * lightIntensity * input.normal - lightDir); 

		// Determine the amount of specular light based on the reflection vector, viewing direction, and specular power.
        specular = pow(saturate(dot(reflection, input.viewDirection)), specularPower);
    }

    // Multiply the texture pixel and the input color to get the textured result.
    result = saturate(color + saturate(color1 + color2 + color3 + color4)) * textureColor * textureColor2 * 2.0;

	// Add the specular component last to the output color.

	result = saturate(result + specular);
	if(lightType[2] == 1.0f){
		result = saturate(result + specular);
	}

    return result;
}